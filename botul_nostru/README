README pentru botul "Myrmecophaga tridactyla" [prescurtat Myla], proiect PA.



=======
Echipa:
    Vladimir Cernov     323CC
    Victor Dodon        325CC
    Vicu Straticiuc     325CC
    Vitalie Maldur      324CC

Sistem de operare folosit:
    Linux (Ubuntu, Xubuntu, Archlinux, Lubuntu, Fedora)

Compilator folosit:
    g++ 4.6.x

Mod de compilare:
    $ make

    In urma compilarii este creat directorul bin/ in directorul curent, care
contine fisierele obiect si executabilul "MyBot".



========================== Etapa3 ============================


Task:
    De facut botul mai puternic decat botul etapei 3.

Changelog:
    
    * Am introdus notiunea de borders
    * Noii algoritmi de BFS nu mai folosesc clasa Location
    * Noii algoritmi de BFS folosesc "queue" in loc "list" pentru coada
    * Added areas() function
    * Added findBorder() function
    * Added toBorder() function

Descrierea rezolvarii:

        Practic, cele 3 functii noi adaugate sunt reprezinta o implementare (si
    un comportament al botului) a notiunii de "borders". Terenul de lupta
    trebuie impartit in zone clare: ocupate de noi, sau ocupate de adversar.
        Aceste zone sunt calculate de functia areas(). De fapt, este pornit un
    BFS de la fiecare furnica proprie, cu raza egala cu dublul VIEW_RADIUS.
    Zona astfel marcata reprezinta teritoriul propriu.
        In acelasi timp, este pornit un BFS si din locatiile furnicilor adverse.
    Astfel, zonele (proprie si adversa) se extind simultan. Evident, in acest
    caz campurile din grid la care se va termina BFS-ul vor fi situate la
    distanta egala de furnicile proprii si adverse.
    
        Urmatorul pas, si schimbarea majora fata de etapa 2, este faptul ca
    acum, exista ceva cu adevarat util cu care sa se ocupe furnicile ramase fara
    lucru: indreptarea catre marginea teritoriului propriu: toBorder.
        O furnica proprie ramasa fara job va cauta cea mai apropiata borderTile
    prin findBorder, si prin toBorder se va indrepta catre ea.
    
        In consecinta, chiar daca botul nostru va pierde un numar anumit de
    furnici intr-un mod "not very wise", acest comportament tinde sa "sugrume"
    adversarul, micsorandu-i teritoriul ocupat.
        Micsorarea teritoriul advers va duce la marirea teritoriul propriu, si
    la dezvoltarea mai buna a botului nostru.

Observatii:
    *
        A mai ramas de inlocuit si in ceilalti algoritmi de BFS list cu queue.
    *
        A mai ramas de modificat si ceilalti algoritmi de BFS, astfel incat
    acestia sa nu mai foloseasca clasa Location.
    *
        Avem idei foarte bune pentru etapa 4, insa ele vor avea ca baza botul
    etapei 3 (adica ceea ce a fost scris pana acum se va modifica foarte putin
    ca mod de functionalitate).
    


========================== Etapa2 ============================


Task:
	De facut botul mai puternic decat botul etapei 2.

Changelog:

	* Am fixat algoritmul Astar, acum acesta functioneaza foarte bine.
	* Am eliminat niste mecanisme de la prima etapa:
		- O functie greoaie folosita pentru explorare
		- O functie greoaie folosita pentru atac
		(Ambele bazate pe BFS)
	* Am adus imbunatiri la coding style (multumim Adrian !)
		- am eliminat "trailing whitespace"
		- am introdus un singur tip de comentarii
		- am eliminat functia hard-codata urat
		- am trunchiat si sursele la 80 caractere (erau trunchiate la 100)
	* In proces de a elimina clasa Location.h
	* Am eliminat memory-leaks

Descrierea rezolvarii:

		Pornind de la botul cu etapa 1, am eliminat niste functii care erau
	intr-un fel fortate, si care nu puteau fi dezvoltate in continuare. Nu am
	pastrat decat modul in care botul se expanda si strangea mancare.
		Una din partile rele ale etapei 1 era ca ramaneau furnici care nu
	faceau nimic, si tot ce am facut a fost ca sa folosim Astar pentru a le
	trimite sa cuceareasca adversarul, in cazul in care acesta este vizibil.

		Scopul nostru pentru aceasta etapa este doar sa invingem adversarul,
	ceea ce se si intampla (chiar daca pe o harta ramanem fara un musuroi). De
	asemenea, punem bazele unui comportament nou, practic, care va fi folosit
	in etapa 3 si, bineinteles, etapa 4.

Observatii:
	*
		Complexitatile pentru toti algoritmii implementati sunt incluse la
	sfarsitul acestui README la rubrica "Complexitati".
	*
		Complexitatea algoritmul Astar nu este optima, o vom face optima in
	viitor.



========================== Etapa1 ============================


Task:
    De adaugat botului utilitatea de a strange mancare.

Descrierea rezolvarii:

        Pornind de la unul din scheletele de cod propuse [C++], am adaugat doua
    "servicii" care gestioneaza strangerea mancarii [gatherFood()] si extinderea
    pe harta [explore()]. Ambelor le sunt comune conceptul de reachable in x
    steps, care inlocuieste oarecum variabila isVisible. Logica este urmatoarea:
    daca o furnica vede o mancare, este naiv ca ea sa se duca sa o stranga, daca
    nu poate sa ajunga la mancare, de ex. cand mancarea este peste apa. De aceea,
    furnica o sa plece spre o locatie numai daca poate sa ajunga la ea.
        Pentru a strange mancare am implementat [teamul] o logica simpla: adaugam
    datele despre mancarea la care ajungem in x pasi intr-o coada, si pornim un
    BFS folosind coada spre eventuale furnici aflate in apropiere. Known issue:
    se poate intampla ca aceeasi mancare sa cheme mai multe furnici, ceea ce nu
    se comporta deloc bine in practica. Pentru a scapa de acest lucru, am
    introdus un indicator logic asociat mancarii, astfel incat o mancare va
    chema furnici numai daca indicatorul asociat ei este activ. La gasirea unei
    furnici, indicatorul este dezactivat.
        Pentru a explora harta, am folosit urmatorul mecanism: fiecarui square
    din grid i-am asociat un indicator [exploreIndex], care arata cat timp acel
    square nu a fost vazut (that's it, reached in x steps). Apoi, pentru fiecare
    furnica se calculeaza 4 sume de exploreIndecsi pentru marginea domeniului de
    vizibilitate, furnica urmand sa se indrepte spre partea cu suma cea mai mare
    (spre fogul cel mai intunecos). Known issue: raman furnici care nu au ce sa
    faca. Ca sa le ocupam, am incercat o alta modalitate de a explora harta,
    care este inca intr-o faza beta. Ideea consta intr-un BFS de la musuroaie
    spre exterior.
        Este greu sa dau detalii de implementare, aruncati si voi o privire in
    cod. Oricum, deja am amintit toate ideile de baza aplicate de noi. Ar mai fi
    de mentionat algoritmul A*, aflat in stare beta, pe care il vom folosi in
    viitor.

Observatii:
    *
        Botul e departe de perfectiune, nu face decat sa treaca etapa1 (si
    uneori etapa 2), avand un mecanism primitiv de a ataca (vede musuroiul -
    pleaca spre el).

    *
        Botul contine memory-leakuri, acestea urmeaza a fi eliminate in etapele
    urmatoare. Nu am considerat de cuviinta sa le fixam acum, pentru ca scopul
    nostru este doar ca sa stragem mancare. De asemenea, botul ruleaza mai rapid
    cu ele.

    *
        Tinand cont ca view radius este intotdeauna 77, am hard-codat o functie
    legata de a marca celulele vizibile in grid. Ni s-a parut ca ar fi cea mai
    buna varianta. Aceasta functie deocamdata nu este folosita.

    *
        Noi ne rezervam dreptul de a schimba pe viitor oricare din aceste
    functionalitati, daca vom considera de cuviinta.



========================== Complexitati ============================

	In aceasta rubrica sunt incluse complexitatile algoritmilor ce STAU LA BAZA
functiilor si procedurilor scrise de noi. Bineinteles, complexitatile sunt cele
din contextul codului din cadrul proiectului. De asemenea, vom include si
complexitatile celor mai importante functii ale noastre.

	Asadar, lista de algoritmi si functii folosite:

	BFS:			O(VIEW_RADIUS)
	Astar:			O(n * m)

	mark_explored	O(VIEW_RADIUS)
	explore			O(Ants * VIEW_RADIUS)
	gather_food		O(Ants * VIEW_RADIUS)
	huntHills		O(freeAnts * n * m)
    areas           O(max((4 * VIEW_RADIUS),n * m))
    toBorder        O(n * m)
    findBorder      O(Ants * n * m)

	unde:

		n - numarul de linii din grid
		m - numarul de coloane din grid
		VIEW_RADIUS - raza de vizibilitate
		Ants - numarul furnicilor proprii
        freeAnts - numarul furnicilor proprii libere



========================== Miscelaneous ============================

Contributii:

    Toata echipa:	Idei, propuneri, rezolvari, analiza.
					Stergerea functiilor fara "viitor".

    Vladimir Cernov:    areas() function.
    Vicu Straticiuc:    findBorder() function
    Vitalie Maldur:     toBorder() function
    Victor Dodon:       Anumite revizii ale codului.
                        Scripturi de testare a botului.
    

	Vladimir Cernov:	Fixarea algoritmului A*.
	Vicu Straticiuc:	Exprimarea complexitatii algoritmilor.
	Vitalie Maldur:		Sugestii in imbunatatirea codului.
	Victor Dodon:		Scrierea unor scripturi de "curatire" a codului.


    Vladimir Cernov:    Implementarea algoritmilor de BFS.
    Vicu Straticiuc:    Implementarea algoritmului de mark_visible.
    Victor Dodon:		Crearea si administrarea repozitoriului git,
						Makefile, structurarea si modularizarea proiectului.
    Vitalie Maldur:		Implementarea algoritmului A*.



Resurse folosite:
    http://forums.aichallenge.org
    http://en.wikipedia.org
    http://www.cplusplus.com
	https://www.google.com
